* Day 8: Space Image Format

https://adventofcode.com/2019/day/8

#+begin_src clojure :ns advent-2019.day8 :noweb yes :exports no :mkdirp yes :tangle src/advent_2019/day8.clj

<<code>>

#+end_src

#+begin_src clojure :ns advent-2019.day8 :noweb-ref code :results output
(defn char->int [c]
  (Integer/parseInt (String/valueOf c)))

(defn layers [height width pixels]
  (->> pixels
       (map char->int)
       (partition (* height width))))

#+end_src

#+RESULTS:

#+begin_src clojure
(layers 2 3 "123456789012")
;; => ((1 2 3 4 5 6) (7 8 9 0 1 2))
#+end_src

#+begin_src clojure :ns advent-2019.day8 :noweb-ref code :results output
(defn zeros [layer]
  (count (filter zero? layer)))

#+end_src

#+RESULTS:

#+begin_src clojure
(->> "123456789012"
     (layers 2 3)
     (apply min-key zeros))
;; => (1 2 3 4 5 6)
#+end_src

#+RESULTS:
: nil(1 2 3 4 5 6)

#+begin_src clojure :ns advent-2019.day8 :noweb-ref code :results output :exports both
(require '[clojure.java.io :as io])

(prn ::part1
     (let [layer (->> (io/resource "day8.input")
                      (slurp)
                      (layers 6 25)
                      (apply min-key zeros))
           ones (->> layer
                     (filter #(= 1 %))
                     (count))
           twos (->> layer
                     (filter #(= 2 %))
                     (count))]
       (* ones twos)))

#+end_src

#+RESULTS:
: :advent-2019.day8/part1 1848

#+begin_src clojure :ns advent-2019.day8 :noweb-ref code :results output
(defn choose-px [pixels]
  (if (= 1 (reduce (fn [cur px]
                     (if (#{0 1} cur)
                       (reduced cur)
                       px))
                   pixels))
    \█
    \space))

#+end_src

#+begin_src clojure
(choose-px '(0 2 2 2))
;; => \space

(choose-px '(2 2 1 2))
;; => \█
#+end_src

#+begin_src clojure :ns advent-2019.day8 :noweb-ref code :results output
(defn transpose [layers]
  (apply map list layers))

(require '[clojure.string :as string])

(defn image [height width pixels]
  (->> pixels
       (layers height width)
       (transpose)
       (map choose-px)
       (partition width)
       (map #(string/join %))))

#+end_src

#+RESULTS:

#+being_src clojure
(->> "0222112222120000"
     (image 2 2))
;; => (" █"
;;     "█ ")

#+end_src

#+begin_src clojure :ns advent-2019.day8 :noweb-ref code :results output :exports both
(require '[clojure.pprint :refer [pprint]])

(prn ::part2)
(pprint (->> (io/resource "day8.input")
             (slurp)
             (image 6 25)))

#+end_src

#+RESULTS:
: :advent-2019.day8/part2
: ("████  ██    ██ █  █ ████ "
:  "█    █  █    █ █  █    █ "
:  "███  █       █ █  █   █  "
:  "█    █ ██    █ █  █  █   "
:  "█    █  █ █  █ █  █ █    "
:  "█     ███  ██   ██  ████ ")
