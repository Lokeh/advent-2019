* Day 1: The Tyranny of the Rocket Equation

https://adventofcode.com/2019/day/1

** Prelude

 To start, let's load the input. Each line of our input is a different mass; so
 I start by reading it from my classpath ("resources/day1.input") and split it on
 new line. Then, I convert each line from a string to an integer.
 

 #+begin_src clojure :ns advent-2019.day1 :noweb yes :exports no :mkdirp yes :tangle src/advent_2019/day1.clj
 <<code>>
 #+end_src

 #+begin_src clojure :ns advent-2019.day1 :noweb-ref code
 (require '[clojure.java.io :as io])

 (require '[clojure.string :as string])

 (def input (-> (io/resource "day1.input")
                (slurp)
                (string/split #"\n")
                (->> (map #(Integer/parseInt %)))))

 #+end_src

 #+RESULTS:
 : nilnilnil#'advent-2019.day1/input


 We also can encode the mass calculation:
 
 #+begin_quote
 Take the mass, divide by 3, round down, minus 2
 #+end_quote

 #+begin_src clojure :ns advent-2019.day1 :noweb-ref code
 (defn fuel [mass]
   (-> mass (/ 3) (Math/floor) (- 2) (int)))

 #+end_src

 #+RESULTS:
 : nil#'advent-2019.day1/fuel


** Part 1

 What is the sum of the fuel requirements for all of the modules on your spacecraft?


 ---

 This seems easy enough. We need to calculate the fuel required for each mass in
 our input, and then sum it all up.

 The first step can be easily done with a =map= over the sequence of masses.
 Summing them up sounds like a =reduce=; to do it all in one go, we can use
 transducers!

 #+begin_src clojure :results output :ns advent-2019.day1 :noweb-ref code :exports both
 (def part1 (transduce (map fuel) + input))

 (println ::part1 part1)

 #+end_src

 #+RESULTS:
 : :advent-2019.day1/part1 3397667


** Part 2

 What is the sum of the fuel requirements for all of the modules on your
 spacecraft when also taking into account the mass of the added fuel? (Calculate
 the fuel requirements for each module separately, then add them all up at the
 end.)


 ---

 Let's just try the naive version. We will calculate the fuel requirements again
 for each mass, this time recursing for each until we hit a value that is <= 0.

 Fun fact: =defn= is a valid =recur= target, so we don't need a =loop= here as
 long as we're a tiny bit clever with our function signature.

 #+begin_src clojure :ns advent-2019.day1 :noweb-ref code
 (defn fuel2
   ([mass]
    ;; we don't add the initial mass. we just want the fuel's mass
    ;; so we initialize the loop with the mass of the fuel
    (fuel2 (fuel mass) 0))
   ([mass sum]
    (if (<= mass 0)
      sum
      (recur (fuel mass)
             (+ sum mass)))))

 (assert (= (fuel2 1969) 966))

 (assert (= (fuel2 100756) 50346))

 #+end_src

 #+RESULTS:
 : nil#'advent-2019.day1/fuel2nilnil

 Seems fast enough on the test input. Let's do it!

 #+begin_src clojure :results output :ns advent-2019.day1 :noweb-ref code :exports both
 (def part2 (transduce (map fuel2) + input))

 (println ::part2 part2)
 #+end_src

 #+RESULTS:
 : :advent-2019.day1/part2 5093620
