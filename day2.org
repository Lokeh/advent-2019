* Day 2: 1202 Program Alarm
  
#+begin_src clojure :ns advent-2019.day2 :noweb yes :exports no :mkdirp yes :tangle src/advent-2019/day2.clj

<<code>>

#+end_src

It sounds like the goal is build a little interpreter for our "Intcode"
computer! Let's start by writing down the definitions of our opcodes.

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code
(def ops {99 :halt
          1  :add
          2  :multiply})

#+end_src

#+RESULTS:
: nil#'advent-2019.day2/ops


We also need a function for operating on our tape program. Even though the text
of the problem talks about mutating the tape as we run, in the spirit of Clojure
we'll use an immutable program that, on each operation, returns the new one.

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
(defn parameters [program address]
  (let [arg1-address (get program (+ 1 address))
        arg2-address (get program (+ 2 address))
        result-address (get program (+ 3 address))]
    [(get program arg1-address)
     (get program arg2-address)
     result-address]))

(defmulti -instruction (fn [op-name _ _ _ _]
               op-name))

(defn do-instruction [program address]
  (let [opcode (get program address)
        op-name (ops opcode)]
    (let [[arg1 arg2 result-address] (parameters program address)]
      (-instruction op-name arg1 arg2 result-address program))))

#+end_src

#+RESULTS:


The architecture we're starting with is to use a multi-method to define 
operations like =:add=, =:multiply= and =:halt= which take simple arguments
and return a new program, and have the =do-instruction= function handle parsing the
program for each operation.

Using this, we can define the operations by name in an ad-hoc way. For instance,
here's the =:halt= and =:add= operations:

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
(defmethod -instruction :halt [_ _ _ _ _]
  nil)

(defmethod -instruction :add [_ arg1 arg2 result-address program]
  (assoc program result-address (+ arg1 arg2)))

(defmethod -instruction :multiply [_ arg1 arg2 result-address program]
  (assoc program result-address (* arg1 arg2)))

(assert (= (do-instruction [1,9,10,3,2,3,11,0,99,30,40,50] 0)
           [1,9,10,70,
            2,3,11,0,
            99,
            30,40,50]))

#+end_src

#+RESULTS:

To actually run a program, I think a nice way to model would be as a lazy
sequence of programs that we can take from until =nil=. To do this, we can try
and use the =lazy-seq= macro:

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
(defn run-seq
  ([program] (cons program (run-seq program 0)))
  ([program address]
   (lazy-seq
    (let [program' (do-instruction program address)]
      (cons program'
            (run-seq program' (+ address 4)))))))

#+end_src

#+RESULTS:

The nice thing about this is it allows us to step through each operation of our
program to debug it! For instance:

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
(def test-seq (run-seq [1,9,10,3,2,3,11,0,99,30,40,50]))
;; explodes 😬
(try (take 10 test-seq)
     (catch Exception e
       (println e)))

;; let's debug

(defmacro trivially-catch [& body]
  `(try ~@body
        (catch Exception e#
          (prn (ex-message e#)))))

(trivially-catch
 (prn (first test-seq))) ;; 👍

(trivially-catch
 (prn (first (rest test-seq)))) ;; 👍

(trivially-catch
 (prn (first (rest (rest test-seq))))) ;; 👍

(trivially-catch
 (prn (first (rest (rest (rest test-seq)))))) ;; 💥

#+end_src

#+RESULTS:
: [1 9 10 3 2 3 11 0 99 30 40 50]
: [1 9 10 70 2 3 11 0 99 30 40 50]
: [3500 9 10 70 2 3 11 0 99 30 40 50]
: nil
: class clojure.lang.ExceptionInfoclass java.lang.IllegalArgumentExceptionError printing return value (IllegalArgumentException) at clojure.lang.MultiFn/getFn (MultiFn.java:156).
: No method in multimethod 'op' for dispatch value: null


Oops! We need to handle =nil= in our =do-instruction= function...

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
;; fix when opcode is `nil`
(defn do-instruction [program address]
  (when-let [opcode (get program address)]
    (let [op-name (ops opcode)
          [arg1 arg2 result-address] (parameters program address)]
     (-instruction op-name arg1 arg2 result-address program))))

#+end_src

#+RESULTS:


Finally, let's write a function that will run our program until it halts:

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
(defn run-until-halt [program]
  (last (take-while (comp not nil?) (run-seq program))))

(assert (-> (run-until-halt [1,9,10,3,2,3,11,0,99,30,40,50])
            (= [3500,9,10,70,
                2,3,11,0,
                99,
                30,40,50])))

(assert (-> (run-until-halt [1,0,0,0,99])
            (= [2,0,0,0,99])))

(assert (-> (run-until-halt [2,3,0,3,99])
            (= [2,3,0,6,99])))

(assert (-> (run-until-halt [2,4,4,5,99,0])
            (= [2,4,4,5,99,9801])))

(assert (-> (run-until-halt [1,1,1,4,99,5,6,0,99])
            (= [30,1,1,4,2,5,6,0,99])))

#+end_src

#+RESULTS:


That ends the prelude. Let's see if we can solve for our calendars input!

* Part 1

Take our input, and revert it back to the state it had before it caught fire:

 - Replace address 1 with =12=
 - Replace address 2 with =2=

Then find the value at address 0 once the program halts.

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
(require '[clojure.java.io :as io])

(require '[clojure.string :as string])

(def input (-> (io/resource "day2.input")
               (slurp)
               (string/split #",")
               (->> (mapv #(Integer/parseInt %)))))

(println ::part1 (time (-> input
                           (assoc 1 12
                                  2 2)
                           (run-until-halt)
                           (get 0))))

#+end_src

#+RESULTS:
: "Elapsed time: 0.073036 msecs"
: :advent-2019.day2/part1 6627023

* Part 2

The addresses we changed (1 and 2) in part one where the _input_ of the program.
The first one referred to as the _noun_ and the second as the _verb_ (don't know
why yet).

What two inputs would result in address 0 equal to =19690720=?


---

First, we'll create a new function that handles this behavior of taking input,
associng it into the program memory, and then getting the result.

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
(defn result-with-inputs [program noun verb]
  (-> program
      (assoc 1 noun
             2 verb)
      (run-until-halt)
      (get 0)))

#+end_src

#+RESULTS:

Next, let's create another sequence of these results (#seqception) that we can
use to iterate over until we get the correct inputs:

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
(defn results [program]
  (for [noun (range 0 168)
        verb (range 0 168)]
    ;; return the memory, and the current noun and verb in a vector
    [(result-with-inputs program noun verb) noun verb]))

#+end_src

#+RESULTS:

One of the things I noticed in my testing, was that going above values of 168
caused my solution to NPE. My best guess is this causes the program to start
accessing memory beyond it's tape. I'm going to just cap it there for now and
see if the answer happens before it.

#+begin_src clojure :ns advent-2019.day2 :noweb-ref code :results output
;; set the search result 1 above 19690720 so that it will output the result
(let [[_ noun verb] (time
                     (last
                      (take-while
                       (comp #(not= 19690721 %) first)
                       (results input))))]
  (println ::part2 (+ (* 100 noun) verb)))

#+end_src

#+RESULTS:
: "Elapsed time: 129.596584 msecs"
: :advent-2019.day2/part2 4019
